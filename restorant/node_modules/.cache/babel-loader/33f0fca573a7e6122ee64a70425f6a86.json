{"ast":null,"code":"import { LOGIN } from \"../Constant\"; // import {\n//     FETCH_PRODUCTS_BEGIN,\n//     FETCH_PRODUCTS_SUCCESS,\n//     FETCH_PRODUCTS_FAILURE\n//   } from '../Action/action';\n\nconst initialState = {\n  items: [],\n  loading: false,\n  error: null\n}; // export default function loginProcess(state=[],action){\n//     switch(action.type){\n//         case LOGIN:\n//             console.log(\"Reducer\",action.data)\n//             return [\n//                 ...state,\n//                 {loginData:action.data}\n//             ]\n//             break;\n//         default:\n//             return state\n//     }\n// }\n\nexport default function loginProcess(state = initialState, action) {\n  switch (action.type) {\n    case FETCH_PRODUCTS_BEGIN:\n      // Mark the state as \"loading\" so we can show a spinner or something\n      // Also, reset any errors. We're starting fresh.\n      return { ...state,\n        loading: true,\n        data: null\n      };\n\n    case FETCH_PRODUCTS_SUCCESS:\n      // All done: set loading \"false\".\n      // Also, replace the items with the ones from the server\n      return { ...state,\n        loading: false,\n        data: action\n      };\n\n    case FETCH_PRODUCTS_FAILURE:\n      // The request failed. It's done. So set loading to \"false\".\n      // Save the error, so we can display it somewhere.\n      // Since it failed, we don't have items to display anymore, so set `items` empty.\n      //\n      // This is all up to you and your app though:\n      // maybe you want to keep the items around!\n      // Do whatever seems right for your use case.\n      return { ...state,\n        loading: false,\n        data: action\n      };\n\n    default:\n      // ALWAYS have a default case in a reducer\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/rails/learning/react/Restorent-Django-React-Redux/Django-React/restorant/src/Services/Reducer/reducer.js"],"names":["LOGIN","initialState","items","loading","error","loginProcess","state","action","type","FETCH_PRODUCTS_BEGIN","data","FETCH_PRODUCTS_SUCCESS","FETCH_PRODUCTS_FAILURE"],"mappings":"AAAA,SAASA,KAAT,QAAsB,aAAtB,C,CAEA;AACA;AACA;AACA;AACA;;AAEE,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,EADY;AAEnBC,EAAAA,OAAO,EAAE,KAFU;AAGnBC,EAAAA,KAAK,EAAE;AAHY,CAArB,C,CAMF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,YAAT,CAAsBC,KAAK,GAAGL,YAA9B,EAA4CM,MAA5C,EAAoD;AAC/D,UAAOA,MAAM,CAACC,IAAd;AACE,SAAKC,oBAAL;AACE;AACA;AACA,aAAO,EACL,GAAGH,KADE;AAELH,QAAAA,OAAO,EAAE,IAFJ;AAGLO,QAAAA,IAAI,EAAE;AAHD,OAAP;;AAMF,SAAKC,sBAAL;AACE;AACA;AACA,aAAO,EACL,GAAGL,KADE;AAELH,QAAAA,OAAO,EAAE,KAFJ;AAGLO,QAAAA,IAAI,EAAEH;AAHD,OAAP;;AAMF,SAAKK,sBAAL;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAO,EACL,GAAGN,KADE;AAELH,QAAAA,OAAO,EAAE,KAFJ;AAGLO,QAAAA,IAAI,EAAEH;AAHD,OAAP;;AAMF;AACE;AACA,aAAOD,KAAP;AAnCJ;AAqCD","sourcesContent":["import { LOGIN } from \"../Constant\";\n\n// import {\n//     FETCH_PRODUCTS_BEGIN,\n//     FETCH_PRODUCTS_SUCCESS,\n//     FETCH_PRODUCTS_FAILURE\n//   } from '../Action/action';\n  \n  const initialState = {\n    items: [],\n    loading: false,\n    error: null\n  };\n\n// export default function loginProcess(state=[],action){\n//     switch(action.type){\n//         case LOGIN:\n//             console.log(\"Reducer\",action.data)\n//             return [\n//                 ...state,\n//                 {loginData:action.data}\n//             ]\n//             break;\n//         default:\n//             return state\n//     }\n// }\n\nexport default function loginProcess(state = initialState, action) {\n    switch(action.type) {\n      case FETCH_PRODUCTS_BEGIN:\n        // Mark the state as \"loading\" so we can show a spinner or something\n        // Also, reset any errors. We're starting fresh.\n        return {\n          ...state,\n          loading: true,\n          data: null\n        };\n  \n      case FETCH_PRODUCTS_SUCCESS:\n        // All done: set loading \"false\".\n        // Also, replace the items with the ones from the server\n        return {\n          ...state,\n          loading: false,\n          data: action\n        };\n  \n      case FETCH_PRODUCTS_FAILURE:\n        // The request failed. It's done. So set loading to \"false\".\n        // Save the error, so we can display it somewhere.\n        // Since it failed, we don't have items to display anymore, so set `items` empty.\n        //\n        // This is all up to you and your app though:\n        // maybe you want to keep the items around!\n        // Do whatever seems right for your use case.\n        return {\n          ...state,\n          loading: false,\n          data: action,\n        };\n  \n      default:\n        // ALWAYS have a default case in a reducer\n        return state;\n    }\n  }\n"]},"metadata":{},"sourceType":"module"}